{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","currentTodoActions","todo","type","payload","currentTodoReducer","state","action","filterActions","status","query","initialFilter","All","filterReducer","filter","todosActions","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","className","map","id","title","completed","isSelected","classNames","onClick","handleSetCurrentTodo","TodoFilter","value","onChange","e","target","Active","Completed","name","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","selectedUser","setSelectedUser","useEffect","userId","user","href","email","getLowerString","str","toLowerCase","App","todosFromServer","visibleTodos","newTodos","trim","lowerQuery","includes","getFilteredTodos","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a339de2.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const currentTodoActions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return { ...action.payload };\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype ChangeStatusAction = { type: 'status/CHANGE', payload: Status };\ntype SetQueryAction = { type: 'query/SET', payload: string };\ntype ClearQueryAction = { type: 'query/CLEAR' };\n\ntype Action = ChangeStatusAction | SetQueryAction | ClearQueryAction;\n\nconst changeStatus = (status: Status): ChangeStatusAction => (\n  { type: 'status/CHANGE', payload: status }\n);\n\nconst setQuery = (query: string): SetQueryAction => (\n  { type: 'query/SET', payload: query }\n);\n\nconst clearQuery = (): ClearQueryAction => ({ type: 'query/CLEAR' });\n\nexport const filterActions = { changeStatus, setQuery, clearQuery };\n\nconst initialFilter = {\n  query: '',\n  status: Status.All,\n};\n\nconst filterReducer = (filter = initialFilter, action: Action) => {\n  switch (action.type) {\n    case 'status/CHANGE':\n      return { ...filter, status: action.payload };\n\n    case 'query/SET':\n      return { ...filter, query: action.payload };\n\n    case 'query/CLEAR':\n      return { ...filter, query: '' };\n\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = { type: 'todos/SET', payload: Todo[] };\ntype Action = SetAction;\n\nconst set = (todos: Todo[]): SetAction => (\n  { type: 'todos/SET', payload: todos }\n);\n\nexport const todosActions = { set };\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[] | [];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const handleSetCurrentTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => {\n          const { id, title, completed } = todo;\n          const isSelected = currentTodo && currentTodo.id === id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': isSelected,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleSetCurrentTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={classNames(\n                        'far',\n                        {\n                          'fa-eye-slash': isSelected,\n                          'fa-eye': !isSelected,\n                        },\n                      )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter = () => {\n  const { status, query } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleChangeStatus = (value: string) => {\n    dispatch(filterActions.changeStatus(value as Status));\n  };\n\n  const handleSetQuery = (value: string) => {\n    dispatch(filterActions.setQuery(value));\n  };\n\n  const handleClearQuery = () => {\n    dispatch(filterActions.clearQuery());\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(e) => handleChangeStatus(e.target.value)}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          name=\"query\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => handleSetQuery(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { currentTodoActions } from '../../features/currentTodo';\nimport { useAppDispatch } from '../../app/hooks';\n\ntype Props = {\n  currentTodo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ currentTodo }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  const handleClearCurrentTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    getUser(currentTodo.userId)\n      .then(user => setSelectedUser(user));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => handleClearCurrentTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser.email}`}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { todosActions } from './features/todos';\nimport { Status } from './types/Status';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nconst getLowerString = (str: string) => {\n  return str.toLowerCase();\n};\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { status, query } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getTodos()\n      .then((todosFromServer) => dispatch(todosActions.set(todosFromServer)));\n  }, []);\n\n  const getFilteredTodos = () => {\n    let newTodos = [...todos];\n\n    if (status !== Status.All) {\n      newTodos = newTodos.filter(todo => (\n        status === Status.Active ? !todo.completed : todo.completed\n      ));\n    }\n\n    if (query.trim()) {\n      const lowerQuery = getLowerString(query).trim();\n\n      newTodos = newTodos.filter(({ title }) => {\n        const lowerTitle = getLowerString(title);\n\n        return lowerTitle.includes(lowerQuery);\n      });\n    }\n\n    return newTodos;\n  };\n\n  const visibleTodos = getFilteredTodos();\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length > 0 ? (\n                <TodoList todos={visibleTodos} />\n              ) : (\n                <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {!!currentTodo && (\n        <TodoModal\n          currentTodo={currentTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}